<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Android 知识点 日常记录（一）]]></title>
    <url>%2F2019%2F06%2F07%2FAndroid%E7%9F%A5%E8%AF%86%E7%82%B9%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95(%E4%B8%80)%2F</url>
    <content type="text"><![CDATA[常识性的知识，自己是知道的，但是又不确定是否准确，经常会出现这种状况。So，为了避免这种尴尬的情况出现，工作中一些小的知识点，整理记录下来。 View控件INVISIBLE，GONE的区别查看项目代码，很多布局是复用一个xml文件，导致有大量的逻辑去处理控件是否显示，VISIBLE不用多说，正常显示控件，一般不可见控件，我会选择GONE属性，但是还存在一种INVISIBLE属性，也是不可见，区别是什么呢？ 源码探究查看ViewGroup源码，如下方法，12345678910protected void measureChildren(int widthMeasureSpec, int heightMeasureSpec) &#123; final int size = mChildrenCount; final View[] children = mChildren; for (int i = 0; i &lt; size; ++i) &#123; final View child = children[i]; if ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123; measureChild(child, widthMeasureSpec, heightMeasureSpec); &#125; &#125; &#125; 123456789101112131415161718192021222324@Overrideprotected void dispatchDraw(Canvas canvas) &#123; ...for (int i = 0; i &lt; childrenCount; i++) &#123; while (transientIndex &gt;= 0 &amp;&amp; mTransientIndices.get(transientIndex) == i) &#123; final View transientChild = mTransientViews.get(transientIndex); if ((transientChild.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || transientChild.getAnimation() != null) &#123; more |= drawChild(canvas, transientChild, drawingTime); &#125; transientIndex++; if (transientIndex &gt;= transientCount) &#123; transientIndex = -1; &#125; &#125; final int childIndex = getAndVerifyPreorderedIndex(childrenCount, i, customOrder); final View child = getAndVerifyPreorderedView(preorderedList, children, childIndex); if ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != null) &#123; more |= drawChild(canvas, child, drawingTime); &#125; &#125; ...&#125; 由上面两个源码方法可知，控件设置GONE属性，没有走measureChild(child, widthMeasureSpec, heightMeasureSpec);方法。 查看dispatchDraw(Canvas canvas);方法，可知，只有设置VISIBLE属性，才会执行drawChild(canvas, child, drawingTime); INVISIBLE与GONE均不执行此方法。 由View绘制流程可知，GONE属性未执行onMeasure()方法，所以不会占用界面空间。INVISIBLE执行了onMeasure()方法，但是没有执行onDraw()方法，所以会占用界面空间，但是不显示。 结论123INVISIBLE:不可见，保留了控件在界面的空间，相当于仍然占着坑GONE：不可见，不保留控件在界面的空间，未占坑 ScrollView只能有一个子节点ScrollView经常被使用在布局中以实现滑动效果，可以显示比实际界面的多的内容。在使用过程中，没注意，项目运行后，出现了ScrollView can host only one direct child异常： 查看官方文档，描述如下12345678public class ScrollView extends FrameLayout java.lang.Object ↳ android.view.View ↳ android.view.ViewGroup ↳ android.widget.FrameLayout ↳ android.widget.ScrollView A view group that allows the view hierarchy placed within it to be scrolled. Scroll view may have only one direct child placed within it. To add multiple views within the scroll view, make the direct child you add a view group, for example LinearLayout, and place additional views within that LinearLayout. 解决方案如官方文档描述，子控件外部嵌套一层LinearLayout,因为ScrollView是继承FrameLayout,FrameLayout的特点是所有控件均重叠防止在左上角，如果有多个子控件在ScrollView，无法实现滑动效果。 代码动态addView动态加载View，根据后台返回的数量来显示，for循环遍历，赋值，出现下图错误。修改方案在错误中有提示。要防止一个View被add多次。 总结很不起眼的小细节，出现错误，会浪费大量的时间，精力去分析，定位。做好记录，加深记忆。争取下次犯高级错误。]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 搭建 Blog 踩坑记录]]></title>
    <url>%2F2019%2F06%2F02%2FHexo-%E6%90%AD%E5%BB%BABlog-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[字数显示undefined如下图： 安装好插件hexo-symbols-count-time后，查看界面，字数显示undefined，可能是因为第一次安装导致，执行如下命令：1hexo clean 然后再次查看，显示正常。 访客量显示在NexT主题的配置文件中，修改busuanzi_count配置项，将enable改为true。 这样显示的样式是鼠标点击图标时，才显示标题，可以修改NexT主题下layout/_third_party/analytics/busuanzi-counter.swig文件，如下：12345&lt;span class="site-pv" title="&#123;&#123; __('footer.total_views') &#125;&#125;"&gt; &#123;&#123; __('footer.total_views') &#125;&#125; &lt;span class="busuanzi-value" id="busuanzi_value_site_pv"&gt; &lt;/span&gt;&lt;/span&gt; 对比源文件，增加了1&#123;&#123; __(&apos;footer.total_views&apos;) &#125;&#125; 配置项。 常用命令记录123456789hexo init 初始化项目hexo s 运行项目hexo g -d 发布项目hexo new page &quot;tags&quot; 新增Itemhexo new “file name” 新建文章 大括号陷阱如下新增配置项，我在 Markdown 格式下，使用 ` 标签，导致配置项被当成JS代码运行，导致错误。 1&#123;&#123; __(&apos;footer.total_views&apos;) &#125;&#125; 建议涉及到代码部分，均使用 Markdown 代码块来表示，防止出现上述描述错误。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitLab + Docker 私有化部署]]></title>
    <url>%2F2019%2F05%2F30%2FGitlab-Docker-%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[为什么使用Gitlab遇到了一个很重视信息安全的Boss，代码都放在本地用SVN管理，对于没有怎么用过SVN的我来说，简直无从下手。为了方便，高效的管理项目，并跟踪项目中的问题，了解到了Gitlab这个神奇的存在，相比Github的私有仓库收费，且可能存在信息安全方面的风险，Gitlab支持私有化部署，而且免费，社区版本基本满足git项目管理需求，权限管理，项目分支版本管理，以及CI/CD功能等，相当小而精。下面介绍如果部署私有化Gitlab。 安装DockerGitlab有两种安装方式。 第一种是自己下载Gitlab安装包，自己配置相关运行环境，相当麻烦，更换机器，就得重新配置，让我想起了当年在服务器上部署MySql，Tomcat，Nginx，Kafka等组件的恐惧，多的时候有七八个组件，部署环境搞大半天，还要分布式部署，那个头大。 第二种方式是用现在非常流行的Docker来部署，Docker是一个虚拟化运行工具，将软件和整个环境打包起来，我们可以不需要任何配置，快速的部署环境来运行软件，提升效率。 下载安装Docker,执行如下命令:1brew cask install docker 配置镜像加速器鉴于国内网络原因，拉取Docker镜像十分缓慢，非常有必要配置一个加速器来解决速度问题。 在任务栏点击 Docker for mac 应用图标-&gt; Perferences... -&gt; Daemon -&gt; Registry mirrors在列表中填写加速器地址即可。修改完成之后，点击Apply &amp; Restart按钮，Docker 就会重启并应用配置的镜像地址了。地址如下：1http://f1361db2.m.daocloud.io 编写docker-compose.yml配置文件新建docker-compose.yml文件，写入如下内容。端口可以使用默认端口，也可以自己配置端口。 image 代表着最新的gitlab版本镜像 hostname代表域名，本地可以直接使用localhost或者局域网ip Volumes 本机映射文件路径可自己配置 12345678910111213141516web: image: 'gitlab/gitlab-ce:latest' restart: always hostname: 'gitlab.example.com' environment: GITLAB_OMNIBUS_CONFIG: | external_url 'https://gitlab.example.com' # Add any other gitlab.rb configuration here, each on its own line ports: - '80:80' - '443:443' - '22:22' volumes: - '/srv/gitlab/config:/etc/gitlab' - '/srv/gitlab/logs:/var/log/gitlab' - '/srv/gitlab/data:/var/opt/gitlab' 在当前目录下执行如下命令:1docker-compose up -d 等待片刻，浏览器网址输入打开localhost,就可以看到一个部署成功，运行起来的Gitlab，如下图： 因为我docker-compose.yml文件中images配置了汉化镜像：1image: &apos;twang2218/gitlab-ce-zh:11.1.4&apos; 分分钟，一个本地私有化的Gitlab就部署好了。]]></content>
      <categories>
        <category>GitLab</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇Blog]]></title>
    <url>%2F2019%2F05%2F28%2F%E7%AC%AC%E4%B8%80%E7%AF%87Blog%2F</url>
    <content type="text"><![CDATA[一直想着搭建自己的博客，拥有自己的一个小天地。最近终于行动了，博客搭建过程中，并没有想象中的那么难，畏难心态在以后的人生路中需要全力克服。 毕业这几年，感觉都不是很顺，但是也收获成长了许多，接下来就是对自己狠一点，逼自己尽快成长。下周就是新的开始了，希望自己能抗下压力，挑战成功，逆风翻盘。 自己焦虑的点是什么，就去做它，一直做到自己不焦虑为止。加油。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F28%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
